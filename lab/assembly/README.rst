Assembly Language
=================

Hello Assembly
--------------

The ``data`` directory contains the function ``hello_assembly`` in the file ``hello_assembly.c``.

.. admonition:: Tasks

  1) Use the GCC and Clang compilers to compile the function and generate assembly code.
  2) In the generated assembly code generated by the two compilers:

     * Locate the string "Hello Assembly Language!".
     * Identify the instructions that the compilers insert to conform to the procedure call standard.
     * Identify the function call to libc that prints the string.
  3) Write a C++ driver that calls the ``hello_assembly`` function  and test your implementation.

Assembly Function
-----------------

The ``data`` directory contains the ``add_values`` function with C syntax ``extern "C" void add_values(int32_t * a, int32_t * b, int32_t * c)``, which does the following:

1) Load the first 32-bit value from the address in ``X0`` to ``W3``.
2) Load the second 32-bit value from the address in ``X1`` into ``W4``.
3) Add the 32-bit values in ``W3`` and ``W4`` and write the result to ``W5``.
4) Store the resulting data from ``W5`` to memory using the address in ``X5``.

.. admonition:: Tasks

  1) Assemble the file and use the name ``add_values.o`` for the output.
  2) Generate the following from ``add_values.o``:

     * Hexadecimal dump
     * Section Headers
     * Disassembly
  3) Find the size of the ``.text`` section in the generated output and explain it.
  4) Write a C++ driver that calls the ``add_values`` function and illustrate it with an example.
  5) Use the GNU Project Debugger `GDB <https://www.sourceware.org/gdb/>`__ to step through an example call to the ``add_values`` function. Display the contents of the general-purpose registers after each of the executed instructions.